abstract class Duck { 
 FlyBehaviour flyBehaviour; 
 QuackBehaviour quackBehaviour; 
 
 public Duck() { 
 } 
 public abstract void display(); 
 public void performFly() { 
 flyBehaviour.fly(); 
 } 
 public void performQuack() { 
 quackBehaviour.quack(); 
 } 
 public void swim() { 
 System.out.println("All ducks float even decoys"); 
 } 
 public void setFlyBehaviour(FlyBehaviour fb) { 
 flyBehaviour = fb; 
 } 
 public void setQuackBehaviour(QuackBehaviour qb) {
QuackBehaviour q; 
 } 
} 
 class MallardDuck extends Duck { 
 public MallardDuck() { 
 quackBehaviour = new Quack(); 
 flyBehaviour = new FlyWithWings(); 
 } 
 public void display() { 
 System.out.println("I'm a real Mallard duck"); 
 } 
} 
 interface FlyBehaviour { 
 public void fly(); 
} 
 interface QuackBehaviour { 
 public void quack() { 
 System.out.println("Quack"); 
 } 
} 
 class Quack implements QuackBehaviour { 
 public void quack() { 
 System.out.println("Quack"); 
 } 
} 
 class FlyWithWings implements FlyBehaviour { 
 public void fly() { 
 System.out.println("I'm flying!!"); 
 } 
} 
public class Main { 
 public static void main(String[] args) { 
 Duck mallard = new MallardDuck(); 
 mallard.performQuack(); 
 mallard.performFly(); 
 } 
} 
/*Simple Programme*/ 
interface DuckB 
{ 
 public void oper(); 
} 
class Fly implements DuckB 
{ 
 public void oper() 
 { 
 System.out.println("Duck Flies"); 
 } 
} 
 class Quack implements DuckB 
{ 
 public void oper() 
 { 
 System.out.println("Duck Sounds Quack Quack"); 
 } 
} 
class Context 
{ 
 private DuckB s1; 
 public Context(DuckB p) 
 { 
 this.s1=p; 
 } 
 public void est() 
 { 
 s1.oper(); 
 } 
} 
public class Main 
{ 
public static void main(String[] args) { 
Context c1=new Context(new Fly()); 
System.out.println("Duck Behaviour"); 
c1.est(); 
c1=new Context(new Quack()); 
System.out.println("Duck Behaviour "); 
c1.est(); 
 } 
}